#@ # 
#@ # Running pt_shell Version J-2014.12 for amd64 -- Nov 23, 2014
#@ # Date:   Sun Jun 25 20:56:47 2017
#@ # Run by: s242094@worksynthesis
#@ 

source /tools/synopsys_14.15/pt/admin/setup/.synopsys_pt.setup
#@ # -- Starting source /tools/synopsys_14.15/pt/admin/setup/.synopsys_pt.setup

#@ #
#@ # .synopsys_pt.setup: Initialization File for PrimeTime
#@ #
#@ 
#@ 
#@ #
#@ # Enable stack trace output on fatal.  Not available for all architectures.
#@ #
#@ if { $sh_arch == "sparcOS5" || $sh_arch == "hpux10" ||      $sh_arch == "hp32" || $sh_arch == "linux" } {
#@   set_unix_variable SYNOPSYS_TRACE ""
#@ }
#@ 
#@ #
#@ # Variable settings
#@ #
#@ 
#@ #
#@ # Synopsys strongly recommends that you use new variable message
#@ # tracing for debugging purposes only.
#@ #
#@ set sh_new_variable_message true
#@ 
#@ #
#@ # Synopsys strongly recommends that you uncomment the following command
#@ # in order to set sh_command_abbrev_mode to the value "Command-Line-Only".
#@ # Command abbreviation is intended as an interactive convenience.  Using
#@ # abbreviations in scripts can cause commands to fail in subsequent releases.
#@ # 
#@ #set sh_command_abbrev_mode "Command-Line-Only"
#@ 
#@ #
#@ # Some useful aliases
#@ #
#@ alias list_commands		help
#@ alias report_constraints	report_constraint
#@ alias report_clocks		report_clock
#@ 
#@ #
#@ # The alias for get_clock was added when get_clock_network_objects
#@ # was introduced, as it conflicts with get_clocks (and get_clock is a
#@ # typical abbreviation for get_clocks)
#@ #
#@ alias get_clock get_clocks
#@ 
#@ 
#@ #
#@ #
#@ # The alias of q to quit is commented out.  Remove the comment 
#@ # character if you want this alias.  Some users find that having 
#@ # this particular alias causes problems when mixed with page-mode
#@ # for reports - an accidental repeated 'q' not only cancels the
#@ # output but exits the tool.
#@ #
#@ #alias q quit
#@ 
#@ # -- End source /tools/synopsys_14.15/pt/admin/setup/.synopsys_pt.setup

#@ # -- Starting source /tools/synopsys_14.15/pt/auxx/tcllib/lib/itcl3.4/itcl.tcl

#@ #
#@ # itcl.tcl
#@ # ----------------------------------------------------------------------
#@ # Invoked automatically upon startup to customize the interpreter
#@ # for [incr Tcl].
#@ # ----------------------------------------------------------------------
#@ #   AUTHOR:  Michael J. McLennan
#@ #            Bell Labs Innovations for Lucent Technologies
#@ #            mmclennan@lucent.com
#@ #            http://www.tcltk.com/itcl
#@ #
#@ #      RCS:  $Id: itcl.tcl,v 1.12 2009/10/14 20:53:34 hobbs Exp $
#@ # ----------------------------------------------------------------------
#@ #            Copyright (c) 1993-1998  Lucent Technologies, Inc.
#@ # ======================================================================
#@ # See the file "license.terms" for information on usage and
#@ # redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#@ 
#@ proc ::itcl::delete_helper { name args } {
#@     ::itcl::delete object $name
#@ }
#@ 
#@ # ----------------------------------------------------------------------
#@ #  USAGE:  local <className> <objName> ?<arg> <arg>...?
#@ #
#@ #  Creates a new object called <objName> in class <className>, passing
#@ #  the remaining <arg>'s to the constructor.  Unlike the usual
#@ #  [incr Tcl] objects, however, an object created by this procedure
#@ #  will be automatically deleted when the local call frame is destroyed.
#@ #  This command is useful for creating objects that should only remain
#@ #  alive until a procedure exits.
#@ # ----------------------------------------------------------------------
#@ proc ::itcl::local {class name args} {
#@     set ptr [uplevel [list $class $name] $args]
#@     uplevel [list set itcl-local-$ptr $ptr]
#@     set cmd [uplevel namespace which -command $ptr]
#@     uplevel [list trace variable itcl-local-$ptr u         "::itcl::delete_helper $cmd"]
#@     return $ptr
#@ }
#@ 
#@ # ----------------------------------------------------------------------
#@ # auto_mkindex
#@ # ----------------------------------------------------------------------
#@ # Define Itcl commands that will be recognized by the auto_mkindex
#@ # parser in Tcl...
#@ #
#@ 
#@ #
#@ # USAGE:  itcl::class name body
#@ # Adds an entry for the given class declaration.
#@ #
#@ foreach cmd {itcl::class class} {
#@     auto_mkindex_parser::command $cmd {name body} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@ 
#@ 	variable parser
#@ 	variable contextStack
#@ 	set contextStack [linsert $contextStack 0 $name]
#@ 	$parser eval $body
#@ 	set contextStack [lrange $contextStack 1 end]
#@     }
#@ }
#@ # -- Starting source /tools/synopsys_14.15/pt/auxx/tcllib/lib/tcl8.5/auto.tcl

#@ # auto.tcl --
#@ #
#@ # utility procs formerly in init.tcl dealing with auto execution
#@ # of commands and can be auto loaded themselves.
#@ #
#@ # Copyright (c) 1991-1993 The Regents of the University of California.
#@ # Copyright (c) 1994-1998 Sun Microsystems, Inc.
#@ #
#@ # See the file "license.terms" for information on usage and redistribution
#@ # of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#@ #
#@ 
#@ # auto_reset --
#@ #
#@ # Destroy all cached information for auto-loading and auto-execution,
#@ # so that the information gets recomputed the next time it's needed.
#@ # Also delete any commands that are listed in the auto-load index.
#@ #
#@ # Arguments: 
#@ # None.
#@ 
#@ proc auto_reset {} {
#@     if {[array exists ::auto_index]} {
#@ 	foreach cmdName [array names ::auto_index] {
#@ 	    set fqcn [namespace which $cmdName]
#@ 	    if {$fqcn eq ""} {continue}
#@ 	    rename $fqcn {}
#@ 	}
#@     }
#@     unset -nocomplain ::auto_execs ::auto_index ::tcl::auto_oldpath
#@     if {[catch {llength $::auto_path}]} {
#@ 	set ::auto_path [list [info library]]
#@     } else {
#@ 	if {[info library] ni $::auto_path} {
#@ 	    lappend ::auto_path [info library]
#@ 	}
#@     }
#@ }
#@ 
#@ # tcl_findLibrary --
#@ #
#@ #	This is a utility for extensions that searches for a library directory
#@ #	using a canonical searching algorithm. A side effect is to source
#@ #	the initialization script and set a global library variable.
#@ #
#@ # Arguments:
#@ # 	basename	Prefix of the directory name, (e.g., "tk")
#@ #	version		Version number of the package, (e.g., "8.0")
#@ #	patch		Patchlevel of the package, (e.g., "8.0.3")
#@ #	initScript	Initialization script to source (e.g., tk.tcl)
#@ #	enVarName	environment variable to honor (e.g., TK_LIBRARY)
#@ #	varName		Global variable to set when done (e.g., tk_library)
#@ 
#@ proc tcl_findLibrary {basename version patch initScript enVarName varName} {
#@     upvar #0 $varName the_library
#@     global env
#@ 
#@     set dirs {}
#@     set errors {}
#@ 
#@     # The C application may have hardwired a path, which we honor
#@ 
#@     if {[info exists the_library] && $the_library ne ""} {
#@ 	lappend dirs $the_library
#@     } else {
#@ 
#@ 	# Do the canonical search
#@ 
#@ 	# 1. From an environment variable, if it exists.
#@ 	#    Placing this first gives the end-user ultimate control
#@ 	#    to work-around any bugs, or to customize.
#@ 
#@         if {[info exists env($enVarName)]} {
#@             lappend dirs $env($enVarName)
#@         }
#@ 
#@ 	# 2. In the package script directory registered within
#@ 	#    the configuration of the package itself.
#@ 
#@ 	if {[catch {
#@ 	    ::${basename}::pkgconfig get scriptdir,runtime
#@ 	} value] == 0} {
#@ 	    lappend dirs $value
#@ 	}
#@ 
#@ 	# 3. Relative to auto_path directories.  This checks relative to the
#@ 	# Tcl library as well as allowing loading of libraries added to the
#@ 	# auto_path that is not relative to the core library or binary paths.
#@ 	foreach d $::auto_path {
#@ 	    lappend dirs [file join $d $basename$version]
#@ 	    if {$::tcl_platform(platform) eq "unix"
#@ 		&& $::tcl_platform(os) eq "Darwin"} {
#@ 		# 4. On MacOSX, check the Resources/Scripts subdir too
#@ 		lappend dirs [file join $d $basename$version Resources Scripts]
#@ 	    }
#@ 	}
#@ 
#@ 	# 3. Various locations relative to the executable
#@ 	# ../lib/foo1.0		(From bin directory in install hierarchy)
#@ 	# ../../lib/foo1.0	(From bin/arch directory in install hierarchy)
#@ 	# ../library		(From unix directory in build hierarchy)
#@ 	#
#@ 	# Remaining locations are out of date (when relevant, they ought
#@ 	# to be covered by the $::auto_path seach above) and disabled.
#@ 	#
#@ 	# ../../library		(From unix/arch directory in build hierarchy)
#@ 	# ../../foo1.0.1/library
#@ 	#		(From unix directory in parallel build hierarchy)
#@ 	# ../../../foo1.0.1/library
#@ 	#		(From unix/arch directory in parallel build hierarchy)
#@ 
#@         set parentDir [file dirname [file dirname [info nameofexecutable]]]
#@         set grandParentDir [file dirname $parentDir]
#@         lappend dirs [file join $parentDir lib $basename$version]
#@         lappend dirs [file join $grandParentDir lib $basename$version]
#@         lappend dirs [file join $parentDir library]
#@ 	if {0} {
#@ 	    lappend dirs [file join $grandParentDir library]
#@ 	    lappend dirs [file join $grandParentDir $basename$patch library]
#@ 	    lappend dirs [file join [file dirname $grandParentDir] 			      $basename$patch library]
#@ 	}
#@     }
#@     # uniquify $dirs in order
#@     array set seen {}
#@     foreach i $dirs {
#@ 	# Take note that the [file normalize] below has been noted to
#@ 	# cause difficulties for the freewrap utility.  See Bug 1072136.
#@ 	# Until freewrap resolves the matter, one might work around the
#@ 	# problem by disabling that branch.
#@ 	if {[interp issafe]} {
#@ 	    set norm $i
#@ 	} else {
#@ 	    set norm [file normalize $i]
#@ 	}
#@ 	if {[info exists seen($norm)]} { continue }
#@ 	set seen($norm) ""
#@ 	lappend uniqdirs $i
#@     }
#@     set dirs $uniqdirs
#@     foreach i $dirs {
#@         set the_library $i
#@         set file [file join $i $initScript]
#@ 
#@ 	# source everything when in a safe interpreter because
#@ 	# we have a source command, but no file exists command
#@ 
#@         if {[interp issafe] || [file exists $file]} {
#@             if {![catch {uplevel #0 [list source $file]} msg opts]} {
#@                 return
#@             } else {
#@                 append errors "$file: $msg\n"
#@ 		append errors [dict get $opts -errorinfo]\n
#@             }
#@         }
#@     }
#@     unset -nocomplain the_library
#@     set msg "Can't find a usable $initScript in the following directories: \n"
#@     append msg "    $dirs\n\n"
#@     append msg "$errors\n\n"
#@     append msg "This probably means that $basename wasn't installed properly.\n"
#@     error $msg
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------
#@ # auto_mkindex
#@ # ----------------------------------------------------------------------
#@ # The following procedures are used to generate the tclIndex file
#@ # from Tcl source files.  They use a special safe interpreter to
#@ # parse Tcl source files, writing out index entries as "proc"
#@ # commands are encountered.  This implementation won't work in a
#@ # safe interpreter, since a safe interpreter can't create the
#@ # special parser and mess with its commands.  
#@ 
#@ if {[interp issafe]} {
#@     return	;# Stop sourcing the file here
#@ }
#@ 
#@ # auto_mkindex --
#@ # Regenerate a tclIndex file from Tcl source files.  Takes as argument
#@ # the name of the directory in which the tclIndex file is to be placed,
#@ # followed by any number of glob patterns to use in that directory to
#@ # locate all of the relevant files.
#@ #
#@ # Arguments: 
#@ # dir -		Name of the directory in which to create an index.
#@ # args -	Any number of additional arguments giving the
#@ #		names of files within dir.  If no additional
#@ #		are given auto_mkindex will look for *.tcl.
#@ 
#@ proc auto_mkindex {dir args} {
#@     if {[interp issafe]} {
#@         error "can't generate index within safe interpreter"
#@     }
#@ 
#@     set oldDir [pwd]
#@     cd $dir
#@     set dir [pwd]
#@ 
#@     append index "# Tcl autoload index file, version 2.0\n"
#@     append index "# This file is generated by the \"auto_mkindex\" command\n"
#@     append index "# and sourced to set up indexing information for one or\n"
#@     append index "# more commands.  Typically each line is a command that\n"
#@     append index "# sets an element in the auto_index array, where the\n"
#@     append index "# element name is the name of a command and the value is\n"
#@     append index "# a script that loads the command.\n\n"
#@     if {[llength $args] == 0} {
#@ 	set args *.tcl
#@     }
#@ 
#@     auto_mkindex_parser::init
#@     foreach file [glob -- {*}$args] {
#@         if {[catch {auto_mkindex_parser::mkindex $file} msg opts] == 0} {
#@             append index $msg
#@         } else {
#@             cd $oldDir
#@ 	    return -options $opts $msg
#@         }
#@     }
#@     auto_mkindex_parser::cleanup
#@ 
#@     set fid [open "tclIndex" w]
#@     puts -nonewline $fid $index
#@     close $fid
#@     cd $oldDir
#@ }
#@ 
#@ # Original version of auto_mkindex that just searches the source
#@ # code for "proc" at the beginning of the line.
#@ 
#@ proc auto_mkindex_old {dir args} {
#@     set oldDir [pwd]
#@     cd $dir
#@     set dir [pwd]
#@     append index "# Tcl autoload index file, version 2.0\n"
#@     append index "# This file is generated by the \"auto_mkindex\" command\n"
#@     append index "# and sourced to set up indexing information for one or\n"
#@     append index "# more commands.  Typically each line is a command that\n"
#@     append index "# sets an element in the auto_index array, where the\n"
#@     append index "# element name is the name of a command and the value is\n"
#@     append index "# a script that loads the command.\n\n"
#@     if {[llength $args] == 0} {
#@ 	set args *.tcl
#@     }
#@     foreach file [glob -- {*}$args] {
#@ 	set f ""
#@ 	set error [catch {
#@ 	    set f [open $file]
#@ 	    while {[gets $f line] >= 0} {
#@ 		if {[regexp {^proc[ 	]+([^ 	]*)} $line match procName]} {
#@ 		    set procName [lindex [auto_qualify $procName "::"] 0]
#@ 		    append index "set [list auto_index($procName)]"
#@ 		    append index " \[list source \[file join \$dir [list $file]\]\]\n"
#@ 		}
#@ 	    }
#@ 	    close $f
#@ 	} msg opts]
#@ 	if {$error} {
#@ 	    catch {close $f}
#@ 	    cd $oldDir
#@ 	    return -options $opts $msg
#@ 	}
#@     }
#@     set f ""
#@     set error [catch {
#@ 	set f [open tclIndex w]
#@ 	puts -nonewline $f $index
#@ 	close $f
#@ 	cd $oldDir
#@     } msg opts]
#@     if {$error} {
#@ 	catch {close $f}
#@ 	cd $oldDir
#@ 	error $msg $info $code
#@ 	return -options $opts $msg
#@     }
#@ }
#@ 
#@ # Create a safe interpreter that can be used to parse Tcl source files
#@ # generate a tclIndex file for autoloading.  This interp contains
#@ # commands for things that need index entries.  Each time a command
#@ # is executed, it writes an entry out to the index file.
#@ 
#@ namespace eval auto_mkindex_parser {
#@     variable parser ""          ;# parser used to build index
#@     variable index ""           ;# maintains index as it is built
#@     variable scriptFile ""      ;# name of file being processed
#@     variable contextStack ""    ;# stack of namespace scopes
#@     variable imports ""         ;# keeps track of all imported cmds
#@     variable initCommands       ;# list of commands that create aliases
#@     if {![info exists initCommands]} {
#@ 	set initCommands [list]
#@     }
#@ 
#@     proc init {} {
#@ 	variable parser
#@ 	variable initCommands
#@ 
#@ 	if {![interp issafe]} {
#@ 	    set parser [interp create -safe]
#@ 	    $parser hide info
#@ 	    $parser hide rename
#@ 	    $parser hide proc
#@ 	    $parser hide namespace
#@ 	    $parser hide eval
#@ 	    $parser hide puts
#@ 	    $parser invokehidden namespace delete ::
#@ 	    $parser invokehidden proc unknown {args} {}
#@ 
#@ 	    # We'll need access to the "namespace" command within the
#@ 	    # interp.  Put it back, but move it out of the way.
#@ 
#@ 	    $parser expose namespace
#@ 	    $parser invokehidden rename namespace _%@namespace
#@ 	    $parser expose eval
#@ 	    $parser invokehidden rename eval _%@eval
#@ 
#@ 	    # Install all the registered psuedo-command implementations
#@ 
#@ 	    foreach cmd $initCommands {
#@ 		eval $cmd
#@ 	    }
#@ 	}
#@     }
#@     proc cleanup {} {
#@ 	variable parser
#@ 	interp delete $parser
#@ 	unset parser
#@     }
#@ }
#@ 
#@ # auto_mkindex_parser::mkindex --
#@ #
#@ # Used by the "auto_mkindex" command to create a "tclIndex" file for
#@ # the given Tcl source file.  Executes the commands in the file, and
#@ # handles things like the "proc" command by adding an entry for the
#@ # index file.  Returns a string that represents the index file.
#@ #
#@ # Arguments: 
#@ #	file	Name of Tcl source file to be indexed.
#@ 
#@ proc auto_mkindex_parser::mkindex {file} {
#@     variable parser
#@     variable index
#@     variable scriptFile
#@     variable contextStack
#@     variable imports
#@ 
#@     set scriptFile $file
#@ 
#@     set fid [open $file]
#@     set contents [read $fid]
#@     close $fid
#@ 
#@     # There is one problem with sourcing files into the safe
#@     # interpreter:  references like "$x" will fail since code is not
#@     # really being executed and variables do not really exist.
#@     # To avoid this, we replace all $ with \0 (literally, the null char)
#@     # later, when getting proc names we will have to reverse this replacement,
#@     # in case there were any $ in the proc name.  This will cause a problem
#@     # if somebody actually tries to have a \0 in their proc name.  Too bad
#@     # for them.
#@     set contents [string map [list \$ \0] $contents]
#@ 
#@     set index ""
#@     set contextStack ""
#@     set imports ""
#@ 
#@     $parser eval $contents
#@ 
#@     foreach name $imports {
#@         catch {$parser eval [list _%@namespace forget $name]}
#@     }
#@     return $index
#@ }
#@ 
#@ # auto_mkindex_parser::hook command
#@ #
#@ # Registers a Tcl command to evaluate when initializing the
#@ # slave interpreter used by the mkindex parser.
#@ # The command is evaluated in the master interpreter, and can
#@ # use the variable auto_mkindex_parser::parser to get to the slave
#@ 
#@ proc auto_mkindex_parser::hook {cmd} {
#@     variable initCommands
#@ 
#@     lappend initCommands $cmd
#@ }
#@ 
#@ # auto_mkindex_parser::slavehook command
#@ #
#@ # Registers a Tcl command to evaluate when initializing the
#@ # slave interpreter used by the mkindex parser.
#@ # The command is evaluated in the slave interpreter.
#@ 
#@ proc auto_mkindex_parser::slavehook {cmd} {
#@     variable initCommands
#@ 
#@     # The $parser variable is defined to be the name of the
#@     # slave interpreter when this command is used later.
#@ 
#@     lappend initCommands "\$parser eval [list $cmd]"
#@ }
#@ 
#@ # auto_mkindex_parser::command --
#@ #
#@ # Registers a new command with the "auto_mkindex_parser" interpreter
#@ # that parses Tcl files.  These commands are fake versions of things
#@ # like the "proc" command.  When you execute them, they simply write
#@ # out an entry to a "tclIndex" file for auto-loading.
#@ #
#@ # This procedure allows extensions to register their own commands
#@ # with the auto_mkindex facility.  For example, a package like
#@ # [incr Tcl] might register a "class" command so that class definitions
#@ # could be added to a "tclIndex" file for auto-loading.
#@ #
#@ # Arguments:
#@ #	name 	Name of command recognized in Tcl files.
#@ #	arglist	Argument list for command.
#@ #	body 	Implementation of command to handle indexing.
#@ 
#@ proc auto_mkindex_parser::command {name arglist body} {
#@     hook [list auto_mkindex_parser::commandInit $name $arglist $body]
#@ }
#@ 
#@ # auto_mkindex_parser::commandInit --
#@ #
#@ # This does the actual work set up by auto_mkindex_parser::command
#@ # This is called when the interpreter used by the parser is created.
#@ #
#@ # Arguments:
#@ #	name 	Name of command recognized in Tcl files.
#@ #	arglist	Argument list for command.
#@ #	body 	Implementation of command to handle indexing.
#@ 
#@ proc auto_mkindex_parser::commandInit {name arglist body} {
#@     variable parser
#@ 
#@     set ns [namespace qualifiers $name]
#@     set tail [namespace tail $name]
#@     if {$ns eq ""} {
#@         set fakeName [namespace current]::_%@fake_$tail
#@     } else {
#@         set fakeName [namespace current]::[string map {:: _} _%@fake_$name]
#@     }
#@     proc $fakeName $arglist $body
#@ 
#@     # YUK!  Tcl won't let us alias fully qualified command names,
#@     # so we can't handle names like "::itcl::class".  Instead,
#@     # we have to build procs with the fully qualified names, and
#@     # have the procs point to the aliases.
#@ 
#@     if {[string match *::* $name]} {
#@         set exportCmd [list _%@namespace export [namespace tail $name]]
#@         $parser eval [list _%@namespace eval $ns $exportCmd]
#@  
#@ 	# The following proc definition does not work if you
#@ 	# want to tolerate space or something else diabolical
#@ 	# in the procedure name, (i.e., space in $alias)
#@ 	# The following does not work:
#@ 	#   "_%@eval {$alias} \$args"
#@ 	# because $alias gets concat'ed to $args.
#@ 	# The following does not work because $cmd is somehow undefined
#@ 	#   "set cmd {$alias} \; _%@eval {\$cmd} \$args"
#@ 	# A gold star to someone that can make test
#@ 	# autoMkindex-3.3 work properly
#@ 
#@         set alias [namespace tail $fakeName]
#@         $parser invokehidden proc $name {args} "_%@eval {$alias} \$args"
#@         $parser alias $alias $fakeName
#@     } else {
#@         $parser alias $name $fakeName
#@     }
#@     return
#@ }
#@ 
#@ # auto_mkindex_parser::fullname --
#@ # Used by commands like "proc" within the auto_mkindex parser.
#@ # Returns the qualified namespace name for the "name" argument.
#@ # If the "name" does not start with "::", elements are added from
#@ # the current namespace stack to produce a qualified name.  Then,
#@ # the name is examined to see whether or not it should really be
#@ # qualified.  If the name has more than the leading "::", it is
#@ # returned as a fully qualified name.  Otherwise, it is returned
#@ # as a simple name.  That way, the Tcl autoloader will recognize
#@ # it properly.
#@ #
#@ # Arguments:
#@ # name -		Name that is being added to index.
#@ 
#@ proc auto_mkindex_parser::fullname {name} {
#@     variable contextStack
#@ 
#@     if {![string match ::* $name]} {
#@         foreach ns $contextStack {
#@             set name "${ns}::$name"
#@             if {[string match ::* $name]} {
#@                 break
#@             }
#@         }
#@     }
#@ 
#@     if {[namespace qualifiers $name] eq ""} {
#@         set name [namespace tail $name]
#@     } elseif {![string match ::* $name]} {
#@         set name "::$name"
#@     }
#@ 
#@     # Earlier, mkindex replaced all $'s with \0.  Now, we have to reverse
#@     # that replacement.
#@     return [string map [list \0 \$] $name]
#@ }
#@ 
#@ if {[llength $::auto_mkindex_parser::initCommands]} {
#@     return
#@ }
#@ 
#@ # Register all of the procedures for the auto_mkindex parser that
#@ # will build the "tclIndex" file.
#@ 
#@ # AUTO MKINDEX:  proc name arglist body
#@ # Adds an entry to the auto index list for the given procedure name.
#@ 
#@ auto_mkindex_parser::command proc {name args} {
#@     variable index
#@     variable scriptFile
#@     # Do some fancy reformatting on the "source" call to handle platform
#@     # differences with respect to pathnames.  Use format just so that the
#@     # command is a little easier to read (otherwise it'd be full of 
#@     # backslashed dollar signs, etc.
#@     append index [list set auto_index([fullname $name])] 	    [format { [list source [file join $dir %s]]} 	    [file split $scriptFile]] "\n"
#@ }
#@ 
#@ # Conditionally add support for Tcl byte code files.  There are some
#@ # tricky details here.  First, we need to get the tbcload library
#@ # initialized in the current interpreter.  We cannot load tbcload into the
#@ # slave until we have done so because it needs access to the tcl_patchLevel
#@ # variable.  Second, because the package index file may defer loading the
#@ # library until we invoke a command, we need to explicitly invoke auto_load
#@ # to force it to be loaded.  This should be a noop if the package has
#@ # already been loaded
#@ 
#@ auto_mkindex_parser::hook {
#@     if {![catch {package require tbcload}]} {
#@ 	if {[namespace which -command tbcload::bcproc] eq ""} {
#@ 	    auto_load tbcload::bcproc
#@ 	}
#@         if {[info commands load] == "load"} {
#@ 	    load {} tbcload $auto_mkindex_parser::parser
#@         }
#@ 
#@ 	# AUTO MKINDEX:  tbcload::bcproc name arglist body
#@ 	# Adds an entry to the auto index list for the given pre-compiled
#@ 	# procedure name.  
#@ 
#@ 	auto_mkindex_parser::commandInit tbcload::bcproc {name args} {
#@ 	    variable index
#@ 	    variable scriptFile
#@ 	    # Do some nice reformatting of the "source" call, to get around
#@ 	    # path differences on different platforms.  We use the format
#@ 	    # command just so that the code is a little easier to read.
#@ 	    append index [list set auto_index([fullname $name])] 		    [format { [list source [file join $dir %s]]} 		    [file split $scriptFile]] "\n"
#@ 	}
#@     }
#@ }
#@ 
#@ # AUTO MKINDEX:  namespace eval name command ?arg arg...?
#@ # Adds the namespace name onto the context stack and evaluates the
#@ # associated body of commands.
#@ #
#@ # AUTO MKINDEX:  namespace import ?-force? pattern ?pattern...?
#@ # Performs the "import" action in the parser interpreter.  This is
#@ # important for any commands contained in a namespace that affect
#@ # the index.  For example, a script may say "itcl::class ...",
#@ # or it may import "itcl::*" and then say "class ...".  This
#@ # procedure does the import operation, but keeps track of imported
#@ # patterns so we can remove the imports later.
#@ 
#@ auto_mkindex_parser::command namespace {op args} {
#@     switch -- $op {
#@         eval {
#@             variable parser
#@             variable contextStack
#@ 
#@             set name [lindex $args 0]
#@             set args [lrange $args 1 end]
#@ 
#@             set contextStack [linsert $contextStack 0 $name]
#@ 	    $parser eval [list _%@namespace eval $name] $args
#@             set contextStack [lrange $contextStack 1 end]
#@         }
#@         import {
#@             variable parser
#@             variable imports
#@             foreach pattern $args {
#@                 if {$pattern ne "-force"} {
#@                     lappend imports $pattern
#@                 }
#@             }
#@             catch {$parser eval "_%@namespace import $args"}
#@         }
#@     }
#@ }
#@ 
#@ return
#@ # -- End source /tools/synopsys_14.15/pt/auxx/tcllib/lib/tcl8.5/auto.tcl

#@ 
#@ #
#@ # USAGE:  itcl::body name arglist body
#@ # Adds an entry for the given method/proc body.
#@ #
#@ foreach cmd {itcl::body body} {
#@     auto_mkindex_parser::command $cmd {name arglist body} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@     }
#@ }
#@ 
#@ #
#@ # USAGE:  itcl::configbody name arglist body
#@ # Adds an entry for the given method/proc body.
#@ #
#@ foreach cmd {itcl::configbody configbody} {
#@     auto_mkindex_parser::command $cmd {name body} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@     }
#@ }
#@ 
#@ #
#@ # USAGE:  ensemble name ?body?
#@ # Adds an entry to the auto index list for the given ensemble name.
#@ #
#@ foreach cmd {itcl::ensemble ensemble} {
#@     auto_mkindex_parser::command $cmd {name {body ""}} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@     }
#@ }
#@ 
#@ #
#@ # USAGE:  public arg ?arg arg...?
#@ #         protected arg ?arg arg...?
#@ #         private arg ?arg arg...?
#@ #
#@ # Evaluates the arguments as commands, so we can recognize proc
#@ # declarations within classes.
#@ #
#@ foreach cmd {public protected private} {
#@     auto_mkindex_parser::command $cmd {args} {
#@         variable parser
#@         $parser eval $args
#@     }
#@ }
#@ 
#@ # ----------------------------------------------------------------------
#@ # auto_import
#@ # ----------------------------------------------------------------------
#@ # This procedure overrides the usual "auto_import" function in the
#@ # Tcl library.  It is invoked during "namespace import" to make see
#@ # if the imported commands reside in an autoloaded library.  If so,
#@ # stubs are created to represent the commands.  Executing a stub
#@ # later on causes the real implementation to be autoloaded.
#@ #
#@ # Arguments -
#@ # pattern	The pattern of commands being imported (like "foo::*")
#@ #               a canonical namespace as returned by [namespace current]
#@ 
#@ proc auto_import {pattern} {
#@     global auto_index
#@ 
#@     set ns [uplevel namespace current]
#@     set patternList [auto_qualify $pattern $ns]
#@ 
#@     auto_load_index
#@ 
#@     foreach pattern $patternList {
#@         foreach name [array names auto_index $pattern] {
#@             if {"" == [info commands $name]} {
#@                 ::itcl::import::stub create $name
#@             }
#@         }
#@     }
#@ }
#@ 
#@ # ----------------------------------------------------------------------
#@ # itcl_class, itcl_info
#@ # ----------------------------------------------------------------------
#@ # Compat handling for itcl_class/info, set for auto_index loading only
#@ #
#@ # Only need to convert public/protected usage.
#@ # Uses Tcl 8.4+ coding style
#@ #
#@ 
#@ if {([llength [info commands itcl_class]] == 0)
#@     && [package vsatisfies $::tcl_version 8.4]} {
#@     proc ::itcl::CmdSplit {body} {
#@ 	# DGP's command split
#@ 	set commands {}
#@ 	set chunk ""
#@ 	foreach line [split $body "\n"] {
#@ 	    append chunk $line
#@ 	    if {[info complete "$chunk\n"]} {
#@ 		# $chunk ends in a complete Tcl command, and none of the
#@ 		# newlines within it end a complete Tcl command.  If there
#@ 		# are multiple Tcl commands in $chunk, they must be
#@ 		# separated by semi-colons.
#@ 		set cmd ""
#@ 		foreach part [split $chunk ";"] {
#@ 		    append cmd $part
#@ 		    if {[info complete "$cmd\n"]} {
#@ 			set cmd [string trimleft $cmd]
#@ 			# Drop empty commands and comments
#@ 			if {($cmd ne "") && ![string match #* $cmd]} {
#@ 			    lappend commands $cmd
#@ 			}
#@ 			if {[string match #* $cmd]} {
#@ 			    set cmd "#;"
#@ 			} else {
#@ 			    set cmd ""
#@ 			}
#@ 		    } else {
#@ 			# No complete command yet.
#@ 			# Replace semicolon and continue
#@ 			append cmd ";"
#@ 		    }
#@ 		}
#@ 		set chunk ""
#@ 	    } else {
#@ 		# No end of command yet.  Put the newline back and continue
#@ 		append chunk "\n"
#@ 	    }
#@ 	}
#@ 	if {[string trim $chunk] ne ""} {
#@ 	    return -code error "Can't parse body into a                sequence of commands.\n\tIncomplete command:\n$chunk"
#@ 	}
#@ 	return $commands
#@     }
#@ 
#@     proc ::itcl::itcl_class {className body} {
#@ 	# inherit baseClass ?baseClass...? ; # no change
#@ 	# constructor args ?init? body     ; # no change
#@ 	# destructor body                  ; # no change
#@ 	# method name args body            ; # no change
#@ 	# proc name args body              ; # no change
#@ 	# common varName ?init?            ; # no change
#@ 	# public varName ?init? ?config?   ; # variable ...
#@ 	# protected varName ?init?         ; # variable ... (?)
#@ 	set cmds [::itcl::CmdSplit $body]
#@ 	set newcmds [list]
#@ 	foreach cmd $cmds {
#@ 	    if {![catch {lindex $cmd 0} firstcmd]} {
#@ 		if {$firstcmd eq "public" || $firstcmd eq "protected"} {
#@ 		    set cmd [linsert $cmd 1 "variable"]
#@ 		}
#@ 	    }
#@ 	    append newcmds "$cmd\n"
#@ 	}
#@ 	return [uplevel 1 [list ::itcl::class $className $newcmds]]
#@     }
#@     set ::auto_index(itcl_class) [list interp alias {} ::itcl_class {} ::itcl::itcl_class]
#@     set ::auto_index(itcl_info) [list interp alias {} ::itcl_info {} ::itcl::find]
#@ }
#@ 
#@ # ----------------------------------------------------------------------
#@ # [namespace inscope]
#@ # ----------------------------------------------------------------------
#@ # Modify [unknown] to handle Itcl's usage of [namespace inscope]
#@ #
#@ 
#@ namespace eval ::itcl {
#@     variable UNKNOWN_ADD_84 {
#@ 	#######################################################################
#@ 	# ADDED BY Itcl
#@ 	# Itcl requires special handling for [namespace inscope]
#@ 	#
#@ 	set cmd [lindex $args 0]
#@ 	if {[regexp "^:*namespace\[ \t\n\]+inscope" $cmd] && [llength $cmd] == 4} {
#@ 
#@ 	    set arglist [lrange $args 1 end]
#@ 	    set ret [catch {uplevel 1 ::$cmd $arglist} result]
#@ 	    if {$ret == 0} {
#@ 		return $result
#@ 	    } else {
#@ 		return -code $ret -errorcode $::errorCode $result
#@ 	    }
#@ 	}
#@ 	#######################################################################
#@     }
#@     variable UNKNOWN_ADD_85 {
#@ 	#######################################################################
#@ 	# ADDED BY Itcl
#@ 	# Itcl requires special handling for [namespace inscope]
#@ 	#
#@ 	set cmd [lindex $args 0]
#@ 	if {[regexp "^:*namespace\[ \t\n\]+inscope" $cmd] && [llength $cmd] == 4} {
#@ 	    #return -code error "You need an {*}"
#@ 	    set arglist [lrange $args 1 end]
#@ 	    set ret [catch {uplevel 1 ::$cmd $arglist} result opts]
#@ 	    dict unset opts -errorinfo
#@ 	    dict incr opts -level
#@ 	    return -options $opts $result
#@ 	}
#@ 	#######################################################################
#@     }
#@     if {[package vsatisfies [package provide Tcl] 8.5]} {
#@ 	proc ::unknown args "$UNKNOWN_ADD_85\n[info body ::unknown]"
#@     } else {
#@ 	proc ::unknown args "$UNKNOWN_ADD_84\n[info body ::unknown]"
#@     }
#@ }
#@ # -- End source /tools/synopsys_14.15/pt/auxx/tcllib/lib/itcl3.4/itcl.tcl

man report_global_slack
sh man report_global_slack
man report_global_slack |
man report_global_slack > report_global_slack.txt
exit
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            required}
#@ 	{-constraint "optimization effort: soft or hard" constraint one_of_string {required {values {soft hard}}}}
#@ 	{-cycles "number of iterations" cycles int required}
#@ }
#@ 
#@ ##############################################################
#@ # restore all cells to LVT
#@ ##############################################################
#@ proc LVT_restore {} {
#@     set lvt_cell [get_cells]
#@     foreach z [get_attribute $lvt_cell full_name ] y [get_attribute $lvt_cell ref_name ] {
#@       set   lvt_type_temp [string replace $y 5 6 LL ]
#@       size_cell $z CORE65LPLVT_nom_1.20V_25C.db:CORE65LPLVT/$lvt_type_temp > /dev/null
#@     }
#@     #report_threshold_voltage_group
#@ }
#@ 
#@ proc CharacterizeScript {} {
#@   LVT_restore
#@   update_power
#@   set leakage_start [get_attribute [get_design] leakage_power]
#@   for {set percentage 1} {$percentage < 100} {incr percentage 5} {
#@     for {set effort 1} {$effort < 30} {incr effort} {
#@       set lvt_percentage [expr { $percentage / 100.0 } ]
#@       set TIME_start [clock clicks -milliseconds]
#@       dualVth -lvt $lvt_percentage -constraint soft -cycles $effort
#@       set time_op [expr {[clock clicks -milliseconds] - $TIME_start}]
#@       update_power
#@       set leakage [get_attribute [get_design] leakage_power]
#@       set LVT_number [sizeof_collection [get_cells -filter "@lib_cell.threshold_voltage_group == LVT"]]
#@       set HVT_number [sizeof_collection [get_cells -filter "@lib_cell.threshold_voltage_group == HVT"]]
#@       echo $percentage "; " $effort "; " $time_op "; " $leakage "; " $LVT_number "; " $HVT_number >> saved/soft1.csv
#@       LVT_restore
#@     }
#@   echo $percentage
#@   }
#@ 
#@ 
#@   dualVt -lvt 0.1 -constraint hard -cycles 30
#@   
#@   for {set percentage 1} {$percentage < 100} {incr percentage 5} {
#@     for {set effort 1} {$effort < 30} {incr effort} {
#@       set lvt_percentage [expr { $percentage / 100.0 } ]
#@       set TIME_start [clock clicks -milliseconds]
#@       dualVt -lvt $lvt_percentage -constraint hard -cycles $effort
#@       set time_op [expr {[clock clicks -milliseconds] - $TIME_start}]
#@       update_power
#@       set leakage [get_attribute [get_design] leakage_power]
#@       set LVT_number [sizeof_collection [get_cells -filter "@lib_cell.threshold_voltage_group == LVT"]]
#@       set HVT_number [sizeof_collection [get_cells -filter "@lib_cell.threshold_voltage_group == HVT"]]
#@       echo $lvt_percentage "; " $effort "; " $time_op "; " $leakage "; " $LVT_number "; " $HVT_number >> saved/hard1.csv
#@       LVT_restore
#@     }
#@   }
#@ }
#@ 
#@ # -- End source ./scripts/final.tcl

CharacterizeScript
aa
exit
